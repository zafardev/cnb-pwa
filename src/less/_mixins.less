// Import
@import "mixins/alert.less";
@import "mixins/base.less";
@import "mixins/button.less";
@import "mixins/card.less";
@import "mixins/forms.less";
@import "mixins/helper.less";
@import "mixins/hr-scroller.less";
@import "mixins/layout.less";
@import "mixins/list.less";
@import "mixins/loader.less";
@import "mixins/media.less";
@import "mixins/sticky.less";
@import "mixins/title.less";

.font-size(@font-size: 16){
    @remValue: (@font-size / 10);
    font-size: ~"@{remValue}rem";
}

.box-sizing(@sizing: border-box) {
    box-sizing: @sizing;
}

//TO INSERT CLEARFIX IN ANY WRAPPER
.clearfix(){
    &:before,
        &:after{
        content: "";
        display: table;
    }
    &:after{
        clear: both;
    }
    zoom: 1;
}

//FOR FLEXBOX GRIDS

.flexbox() {
    display: -webkit-box;           /* OLD - iOS 6-, Safari 3.1-6 */
    display: -moz-box;              /* OLD - Firefox 19- (doesn't work very well) */
    display: -ms-flexbox;           /* TWEENER - IE 10 */
    display: -webkit-flex;          /* NEW - Chrome */
    display: flex;                  /* NEW, Spec - Opera 12.1, Firefox 20+ */
}

.align-items(@val) {
    -webkit-box-align: @val;
    -webkit-align-items: @val;
    -ms-flex-align: @val;
    align-items: @val;
}

.align-self(@val){
    -webkit-align-self: @val; /* Safari 7.0+ */
    align-self: @val;
}

.flex-justify(@val){
    -webkit-justify-content: @val;
    justify-content: @val;
}

.flex(@val) {
    -webkit-box-flex: @val;            /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-flex: @val;               /* OLD - Firefox 19- */
    -webkit-flex: @val;                /* Chrome */
    -ms-flex: @val;                    /* IE 10 */
    flex: @val;                        /* NEW, Spec - Opera 12.1, Firefox 20+ */
}

.flex-grow(@val) {
    -webkit-flex-grow: @val; /* Safari 6.1+ */
    -moz-flex-grow: @val; /* IE 10 */ 
    -ms-flex-grow: @val; /* IE 10 */ 
    flex-grow: @val;
}

.flex-shrink(@val) {
    -webkit-flex-shrink: @val; /* Safari 6.1+ */
    -moz-flex-shrink: @val; /* IE 10 */ 
    -ms-flex-shrink: @val; /* IE 10 */ 
    flex-shrink: @val;
}

.flex-flow(@val) {
    -webkit-flex-flow: @val; /* Safari 6.1+ */
    -moz-flex-flow: @val; /* IE 10 */ 
    -ms-flex-flow: @val; /* IE 10 */ 
    flex-flow: @val;
}

.card-shadow() {
    box-shadow: 0 1px 3px rgba(0, 0, 0, .1);
}

.touch-scroll() {
    overflow-y: scroll; /* has to be scroll, not auto */
    -webkit-overflow-scrolling: touch;
}

.truncate (@line-clamp: 2) {
    display: -webkit-box;
    overflow: hidden;
    position: relative;
    text-overflow: ellipsis;
    -webkit-line-clamp: @line-clamp;
    -webkit-box-orient: vertical;
}

// Position
/*
Example:
.position() { position: static; }
.position(relative) { position: relative; }
.position(absolute, top, right) { position: absolute; top: 0; bottom: auto; left: auto; right: 0; }
.position(absolute, bottom, left) { position: absolute; top: auto; bottom: 0; left: 0; right: auto; }
.position(fixed, 20px, 50%) { position: fixed; top: 20px; right: 50%; }
.position(fixed, 10px, null, null, 10%) { position: absolute; top: 10px; left: 10%; }
.position(absolute, 10px, -, -, 10%) { position: absolute; top: 10px; left: 10%; }
*/

.position(@position: static; @a: null; @b: null; @c: null; @d: null) {

    & when (@position = sticky) {
        position: -webkit-sticky;
        position: -moz-sticky;
        position: -o-sticky;
        position: -ms-sticky;
    }

    position: @position;

    & when (top = @a) {
        top: 0;
        bottom: auto;
    }

    & when (bottom = @a) {
        top: auto;
        bottom: 0;
    }

    & when (left = @b) {
        left: 0;
        right: auto;
    }

    & when (right = @b) {
        left: auto;
        right: 0;
    }

    & when not (null = @a) and not (~'-' = @a) and not (top = @a) and not (bottom = @a) {
        top: @a;
    }

    & when not (null = @b) and not (~'-' = @b) and not (top = @b) and not (bottom = @b) {
        right: @b;
    }

    & when not (null = @c) and not (~'-' = @c) {
        bottom: @c;
    }

    & when not (null = @d) and not (~'-' = @d) {
        left: @d;
    }
}